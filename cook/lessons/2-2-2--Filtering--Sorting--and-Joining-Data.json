{
  "object": [
    [
      {
        "type": "TUTORIAL",
        "title": "Introduction to Filtering Data",
        "body": "In SQL, filtering data is done using the **WHERE** clause. This allows you to retrieve only the rows that meet specific conditions. For example, you can filter records based on equality, inequality, ranges, and pattern matching. \n\n```sql\nSELECT * FROM employees\nWHERE department = 'Sales';\n``` \n\nThis query returns only the employees who work in the Sales department."
      },
      {
        "type": "EXAMPLE",
        "body": "Filter employees by salary greater than a specified amount.",
        "answer": "Consider the following query:\n\n```sql\nSELECT employee_id, name, salary\nFROM employees\nWHERE salary > 50000;\n```\n\nThis query demonstrates filtering where only employees earning more than 50,000 are returned."
      },
      {
        "type": "QUESTION",
        "question": "Which clause is used in SQL to filter results based on a condition?",
        "alternatives": [
          {
            "order": 1,
            "content": "WHERE",
            "explanation": "Correct. The WHERE clause is used to filter records based on specified conditions."
          },
          {
            "order": 2,
            "content": "GROUP BY",
            "explanation": "Incorrect. GROUP BY is used to aggregate data, not for filtering individual records."
          },
          {
            "order": 3,
            "content": "ORDER BY",
            "explanation": "Incorrect. ORDER BY is used to sort data, not for filtering."
          }
        ],
        "correctAlternativeOrder": 1
      },
      {
        "type": "QUESTION",
        "question": "Which of the following queries correctly filters rows where the 'age' column is at least 30?",
        "alternatives": [
          {
            "order": 1,
            "content": "SELECT * FROM users WHERE age >= 30;",
            "explanation": "Correct. This query returns rows where the age is 30 or more."
          },
          {
            "order": 2,
            "content": "SELECT * FROM users HAVING age >= 30;",
            "explanation": "Incorrect. HAVING is used to filter groups, not individual rows."
          },
          {
            "order": 3,
            "content": "SELECT * FROM users WHERE age = 30;",
            "explanation": "Incorrect. This query only returns rows with age exactly 30."
          }
        ],
        "correctAlternativeOrder": 1
      },
      {
        "type": "TUTORIAL",
        "title": "Introduction to Sorting Data",
        "body": "Sorting data in SQL is achieved with the **ORDER BY** clause. This clause can sort data in ascending (ASC) or descending (DESC) order. \n\nFor example, you might want to retrieve a list of employees sorted by their last name or salary.\n\n```sql\nSELECT name, salary\nFROM employees\nORDER BY salary DESC;\n```\n\nThis query lists employees ordered from highest salary to lowest."
      },
      {
        "type": "EXAMPLE",
        "body": "Sort a list of products by price in ascending order.",
        "answer": "Hereâ€™s an example query:\n\n```sql\nSELECT product_id, product_name, price\nFROM products\nORDER BY price ASC;\n```\n\nThis query retrieves all products sorted by the price from lowest to highest."
      },
      {
        "type": "QUESTION",
        "question": "What will the following SQL query do?\n\n```sql\nSELECT name, hire_date\nFROM employees\nORDER BY hire_date;\n```",
        "alternatives": [
          {
            "order": 1,
            "content": "It will sort the employee records in ascending order by hire date.",
            "explanation": "Correct. By default, ORDER BY sorts in ascending order if no direction is specified."
          },
          {
            "order": 2,
            "content": "It will sort the employees in descending order by hire date.",
            "explanation": "Incorrect. DESC must be explicitly stated to sort in descending order."
          },
          {
            "order": 3,
            "content": "It will filter employees based on the hire_date.",
            "explanation": "Incorrect. ORDER BY does not filter records; it only orders them."
          }
        ],
        "correctAlternativeOrder": 1
      },
      {
        "type": "TUTORIAL",
        "title": "Introduction to Joining Data",
        "body": "A JOIN clause in SQL is used to combine rows from two or more tables based on a related column. \n\nCommon join types include:\n- **INNER JOIN**: Returns records that have matching values in both tables.\n- **LEFT JOIN**: Returns all records from the left table, and the matched records from the right table.\n- **RIGHT JOIN**: Returns all records from the right table, and the matched records from the left table.\n- **FULL JOIN**: Returns all records when there is a match in either left or right table.\n\nExample of an INNER JOIN:\n\n```sql\nSELECT a.name, b.department_name\nFROM employees AS a\nINNER JOIN departments AS b\n  ON a.department_id = b.department_id;\n```\n\nThis query returns only the employees with matching department records."
      },
      {
        "type": "EXAMPLE",
        "body": "Combine data from two tables using an INNER JOIN to display student names and their enrolled course names.",
        "answer": "Consider the following query:\n\n```sql\nSELECT s.student_name, c.course_name\nFROM students AS s\nINNER JOIN courses AS c\n  ON s.course_id = c.course_id;\n```\n\nThis query returns only the records where there is a matching course for each student."
      },
      {
        "type": "QUESTION",
        "question": "Which JOIN type returns all records from the left table and the matching records from the right table?",
        "alternatives": [
          {
            "order": 1,
            "content": "LEFT JOIN",
            "explanation": "Correct. LEFT JOIN returns all records from the left table and matches from the right table when available."
          },
          {
            "order": 2,
            "content": "INNER JOIN",
            "explanation": "Incorrect. INNER JOIN returns only the matching records between both tables."
          },
          {
            "order": 3,
            "content": "FULL JOIN",
            "explanation": "Incorrect. FULL JOIN returns all records from both tables, not just from the left."
          }
        ],
        "correctAlternativeOrder": 1
      },
      {
        "type": "TUTORIAL",
        "title": "Advanced Join Scenarios and Combining Filtering with Sorting",
        "body": "In more complex queries, you can combine **JOIN**, **WHERE**, and **ORDER BY** clauses to filter and sort the joined data. \n\nFor example, after joining tables, you might want to filter the results for a specific condition and order them to improve readability.\n\n```sql\nSELECT e.name, d.department_name, e.salary\nFROM employees e\nINNER JOIN departments d ON e.department_id = d.department_id\nWHERE e.salary > 60000\nORDER BY e.salary DESC;\n```\n\nThis query joins the employees and departments tables, filters employees earning more than 60,000, and sorts the results by salary in descending order."
      },
      {
        "type": "EXAMPLE",
        "body": "Filter a joined dataset of orders and customers to show only orders above a certain value and sort by order date.",
        "answer": "Below is an example query:\n\n```sql\nSELECT o.order_id, c.customer_name, o.order_total, o.order_date\nFROM orders o\nINNER JOIN customers c ON o.customer_id = c.customer_id\nWHERE o.order_total > 100\nORDER BY o.order_date ASC;\n```\n\nThis query joins orders and customers, filters orders with a total greater than 100, and sorts the results by order date."
      },
      {
        "type": "QUESTION",
        "question": "In a complex SQL query that joins two tables, which combination of clauses is used to filter the joined data and then sort the results?",
        "alternatives": [
          {
            "order": 1,
            "content": "WHERE clause to filter and ORDER BY clause to sort",
            "explanation": "Correct. The WHERE clause filters the data, and the ORDER BY clause sorts the results after the join."
          },
          {
            "order": 2,
            "content": "GROUP BY clause to filter and ORDER BY clause to sort",
            "explanation": "Incorrect. GROUP BY is used for aggregation, not for filtering individual rows."
          },
          {
            "order": 3,
            "content": "HAVING clause to filter and GROUP BY clause to sort",
            "explanation": "Incorrect. HAVING is used for filtering groups, not sorting."
          }
        ],
        "correctAlternativeOrder": 1
      }
    ]
  ],
  "finishReason": "stop",
  "usage": {
    "promptTokens": 3937,
    "completionTokens": 2996,
    "totalTokens": 6933
  },
  "warnings": [
    {
      "type": "unsupported-setting",
      "setting": "temperature",
      "details": "temperature is not supported for reasoning models"
    }
  ],
  "providerMetadata": {
    "openai": {
      "reasoningTokens": 1024,
      "acceptedPredictionTokens": 0,
      "rejectedPredictionTokens": 0,
      "cachedPromptTokens": 0
    }
  },
  "experimental_providerMetadata": {
    "openai": {
      "reasoningTokens": 1024,
      "acceptedPredictionTokens": 0,
      "rejectedPredictionTokens": 0,
      "cachedPromptTokens": 0
    }
  },
  "response": {
    "id": "chatcmpl-B3F6IrGzWP1YnM8RtD6E1qbu5zudT",
    "timestamp": "2025-02-21T04:38:50.000Z",
    "modelId": "o3-mini-2025-01-31",
    "headers": {
      "access-control-expose-headers": "X-Request-ID",
      "alt-svc": "h3=\":443\"; ma=86400",
      "cf-cache-status": "DYNAMIC",
      "cf-ray": "91540c931ff35000-LIM",
      "connection": "keep-alive",
      "content-encoding": "br",
      "content-type": "application/json",
      "date": "Fri, 21 Feb 2025 04:39:06 GMT",
      "openai-organization": "rh-18",
      "openai-processing-ms": "16539",
      "openai-version": "2020-10-01",
      "server": "cloudflare",
      "strict-transport-security": "max-age=31536000; includeSubDomains; preload",
      "transfer-encoding": "chunked",
      "x-content-type-options": "nosniff",
      "x-ratelimit-limit-requests": "5000",
      "x-ratelimit-limit-tokens": "4000000",
      "x-ratelimit-remaining-requests": "4999",
      "x-ratelimit-remaining-tokens": "3988078",
      "x-ratelimit-reset-requests": "12ms",
      "x-ratelimit-reset-tokens": "178ms",
      "x-request-id": "req_2a5fd93d7bcb983a7a2121a9c51c53eb",
      "set-cookie": "_cfuvid=scKeXpaoI_gEJ3A5x52I8GNJYgzf5G8uyv2lDw95Zes-1740112746853-0.0.1.1-604800000; path=/; domain=.api.openai.com; HttpOnly; Secure; SameSite=None"
    }
  },
  "request": {
    "body": "{\"model\":\"o3-mini\",\"response_format\":{\"type\":\"json_schema\",\"json_schema\":{\"schema\":{\"$schema\":\"http://json-schema.org/draft-07/schema#\",\"type\":\"object\",\"properties\":{\"elements\":{\"type\":\"array\",\"items\":{\"type\":\"array\",\"items\":{\"anyOf\":[{\"type\":\"object\",\"properties\":{\"type\":{\"type\":\"string\",\"const\":\"TUTORIAL\"},\"title\":{\"type\":\"string\"},\"body\":{\"type\":\"string\"}},\"required\":[\"type\",\"title\",\"body\"],\"additionalProperties\":false},{\"type\":\"object\",\"properties\":{\"type\":{\"type\":\"string\",\"const\":\"EXAMPLE\"},\"body\":{\"type\":\"string\"},\"answer\":{\"type\":\"string\"}},\"required\":[\"type\",\"body\",\"answer\"],\"additionalProperties\":false},{\"type\":\"object\",\"properties\":{\"type\":{\"type\":\"string\",\"const\":\"QUESTION\"},\"question\":{\"type\":\"string\"},\"alternatives\":{\"type\":\"array\",\"items\":{\"type\":\"object\",\"properties\":{\"order\":{\"type\":\"number\"},\"content\":{\"type\":\"string\"},\"explanation\":{\"type\":\"string\"}},\"required\":[\"order\",\"content\",\"explanation\"],\"additionalProperties\":false}},\"correctAlternativeOrder\":{\"type\":\"number\"}},\"required\":[\"type\",\"question\",\"alternatives\",\"correctAlternativeOrder\"],\"additionalProperties\":false}]}}}},\"required\":[\"elements\"],\"additionalProperties\":false},\"strict\":true,\"name\":\"response\"}},\"messages\":[{\"role\":\"user\",\"content\":\"You are an expert instructional designer. Create a comprehensive lesson plan with multiple steps about \\\"2.2.2. Filtering, Sorting, and Joining Data\\\".\\n\\n<context>\\n  <syllabus>\\n    Course: Mastering SQL: From Fundamentals to Modern Database Innovations\\n\\n1. Foundations and Historical Context of SQL\\n   1.1. The Origins and Evolution of SQL\\n      1.1.1. Historical Overview of SQL\\n      1.1.2. Pioneers and Milestones\\n      1.1.3. Evolution Timeline and Technological Impact\\n   1.2. Core Principles of Relational Databases\\n      1.2.1. Understanding the Relational Model\\n      1.2.2. Relational Algebra and Tuple Calculus\\n      1.2.3. Ensuring Data Integrity and Consistency\\n   1.3. SQL Standardization and Compliance\\n      1.3.1. Overview of ANSI and ISO Standards\\n      1.3.2. Compliance Challenges and Vendor Variability\\n      1.3.3. Standard vs. Implementation: Critical Comparisons\\n2. SQL Sublanguages and Core Operations\\n   2.1. Data Definition Language (DDL) Essentials\\n      2.1.1. Creating and Modifying Schemas\\n      2.1.2. Defining Data Types and Constraints\\n      2.1.3. Managing Indexes and Views\\n   2.2. Data Query Language (DQL) Fundamentals\\n      2.2.1. Mastering SELECT Statements and Clauses\\n      2.2.2. Filtering, Sorting, and Joining Data\\n      2.2.3. Practical Query Examples and Case Studies\\n   2.3. Data Manipulation and Control (DML & DCL)\\n      2.3.1. INSERT, UPDATE, and DELETE Operations\\n      2.3.2. Transaction Control and Rollback Mechanisms\\n      2.3.3. User Permissions and Access Controls (DCL)\\n3. Advanced SQL Concepts and Extensions\\n   3.1. Procedural Extensions and Control Flow\\n      3.1.1. Stored Procedures and User-Defined Functions\\n      3.1.2. Triggers and Automated Event Handling\\n      3.1.3. SQL/PSM and Other Procedural Extensions\\n   3.2. Advanced Query Techniques\\n      3.2.1. Subqueries and Nested Queries\\n      3.2.2. Window Functions and Aggregate Operations\\n      3.2.3. Recursive Queries and Pattern Matching\\n   3.3. Vendor-Specific Extensions and Cross-Platform Considerations\\n      3.3.1. SQL Portability and Vendor Variability\\n      3.3.2. Exploring Proprietary Extensions\\n      3.3.3. Alternatives to SQL and the Rise of NoSQL\\n4. Modern SQL Applications and Performance Best Practices\\n   4.1. SQL in the Modern Data Ecosystem\\n      4.1.1. Integrating JSON and Non-Relational Data Types\\n      4.1.2. Property Graph Queries and Advanced Data Models\\n      4.1.3. SQL in Cloud and Big Data Environments\\n   4.2. Database Design and Optimization\\n      4.2.1. Schema Design for Performance and Scalability\\n      4.2.2. Query Optimization and Indexing Strategies\\n      4.2.3. Performance Tuning and Troubleshooting\\n   4.3. Real-World Projects and Best Practices\\n      4.3.1. Case Studies of Successful SQL Deployments\\n      4.3.2. Integrating SQL with Modern Programming Frameworks\\n      4.3.3. Establishing Best Practices and Avoiding Common Pitfalls\\n\\n  </syllabus>\\n  <current-topic>\\n    <title>\\n      2.2.2. Filtering, Sorting, and Joining Data\\n    </title>\\n    <description>\\n      This topic covers how to filter and sort data using WHERE conditions and ORDER BY sorting. Additionally, it explains various types of joins (INNER, LEFT, RIGHT, FULL) and their application in combining data from multiple tables. Students will work through complex examples that demonstrate data aggregation across related tables. Nuances in join operations and common errors are discussed.\\n    </description>\\n    <metadata>\\n      <module-title>\\n        2.2. Data Query Language (DQL) Fundamentals\\n      </module-title>\\n      <unit-title>\\n        2. SQL Sublanguages and Core Operations\\n      </unit-title>\\n    </metadata>\\n  </current-topic>\\n  <chunks>\\n    <chunk>| **Keywords** | \\n| --- |\\n| - [As](https://en.wikipedia.org/wiki/Alias_(SQL) \\\"Alias (SQL)\\\")<br>- [Case](https://en.wikipedia.org/wiki/Case_(SQL) \\\"Case (SQL)\\\")<br>- [Create](https://en.wikipedia.org/wiki/Create_(SQL) \\\"Create (SQL)\\\")<br>- [Delete](https://en.wikipedia.org/wiki/Delete_(SQL) \\\"Delete (SQL)\\\")<br>- [From](https://en.wikipedia.org/wiki/From_(SQL) \\\"From (SQL)\\\")<br>- [Group by](https://en.wikipedia.org/wiki/Group_by_(SQL) \\\"Group by (SQL)\\\")<br>- [Having](https://en.wikipedia.org/wiki/Having_(SQL) \\\"Having (SQL)\\\")<br>- [Insert](https://en.wikipedia.org/wiki/Insert_(SQL) \\\"Insert (SQL)\\\")<br>- [Join](https://en.wikipedia.org/wiki/Join_(SQL) \\\"Join (SQL)\\\")<br>- [Merge](https://en.wikipedia.org/wiki/Merge_(SQL) \\\"Merge (SQL)\\\")<br>- [Null](https://en.wikipedia.org/wiki/Null_(SQL) \\\"Null (SQL)\\\")<br>- [Order by](https://en.wikipedia.org/wiki/Order_by \\\"Order by\\\")<br>- [Over](https://en.wikipedia.org/wiki/Window_function_(SQL) \\\"Window function (SQL)\\\")<br>- [Prepare](https://en.wikipedia.org/wiki/Prepare_(SQL) \\\"Prepare (SQL)\\\")<br>- [Select](https://en.wikipedia.org/wiki/Select_(SQL) \\\"Select (SQL)\\\")<br>- [Truncate](https://en.wikipedia.org/wiki/Truncate_(SQL) \\\"Truncate (SQL)\\\")<br>- [Union](https://en.wikipedia.org/wiki/Set_operations_(SQL) \\\"Set operations (SQL)\\\")<br>- [Update](https://en.wikipedia.org/wiki/Update_(SQL) \\\"Update (SQL)\\\")<br>- [With](https://en.wikipedia.org/wiki/With_(SQL) \\\"With (SQL)\\\") |\\n\\n| **Related Concepts** | \\n| --- |\\n| - [Edgar Codd](https://en.wikipedia.org/wiki/Edgar_F._Codd \\\"Edgar F. Codd\\\")<br>- [Relational Database](https://en.wikipedia.org/wiki/Relational_database \\\"Relational database\\\") |\\n\\n| **ISO/IEC SQL Parts** | \\n| --- |\\n| - [Framework](https://en.wikipedia.org/w/index.php?title=SQL/Framework&action=edit&redlink=1 \\\"SQL/Framework (page does not exist)\\\")<br>- [Foundation](https://en.wikipedia.org/w/index.php?title=SQL/Foundation&action=edit&redlink=1 \\\"SQL/Foundation (page does not exist)\\\")<br>- [Call-Level Interface](https://en.wikipedia.org/wiki/SQL/CLI \\\"SQL/CLI\\\")<br>- [Persistent Stored Modules](https://en.wikipedia.org/wiki/SQL/PSM \\\"SQL/PSM\\\")<br>- [Management of External Data](https://en.wikipedia.org/wiki/SQL/MED \\\"SQL/MED\\\")<br>- [Object Language Bindings](https://en.wikipedia.org/wiki/SQL/OLB \\\"SQL/OLB\\\")<br>- [Information and Definition Schemas](https://en.wikipedia.org/wiki/SQL/Schemata \\\"SQL/Schemata\\\")<br>- [SQL Routines and Types for the Java Programming Language](https://en.wikipedia.org/wiki/SQL/JRT \\\"SQL/JRT\\\")<br>- [XML-Related Specifications](https://en.wikipedia.org/wiki/SQL/XML \\\"SQL/XML\\\") |\\n\\n| **Related Articles** | \\n| --- |\\n| - [Database Management Systems](https://en.wikipedia.org/wiki/Database \\\"Database\\\") | \\n\\nThis structured overview provides a comprehensive look at key SQL concepts, related figures, and the various components defined by ISO/IEC standards. Each section is designed to stand alone while maintaining clarity and context, ensuring that readers can easily navigate through the information.</chunk>\\n<chunk>| Related Topics | \\n| --- | \\n| - [Database Models](https://en.wikipedia.org/wiki/Database_model \\\"Database model\\\"): Frameworks for organizing and structuring data within a database. | \\n| - [Database Normalization](https://en.wikipedia.org/wiki/Database_normalization \\\"Database normalization\\\"): The process of organizing data to reduce redundancy and improve data integrity. | \\n| - [Database Storage Structures](https://en.wikipedia.org/wiki/Database_storage_structures \\\"Database storage structures\\\"): Methods and formats for storing data in databases, impacting performance and efficiency. | \\n| - [Distributed Database](https://en.wikipedia.org/wiki/Distributed_database \\\"Distributed database\\\"): A database that is spread across multiple locations, allowing for improved access and reliability. | \\n| - [Federated Database System](https://en.wikipedia.org/wiki/Federated_database_system \\\"Federated database system\\\"): A system that allows multiple autonomous databases to be accessed and queried as a single database. | \\n| - [Referential Integrity](https://en.wikipedia.org/wiki/Referential_integrity \\\"Referential integrity\\\"): A property that ensures relationships between tables remain consistent, preventing orphaned records. | \\n| - [Relational Algebra](https://en.wikipedia.org/wiki/Relational_algebra \\\"Relational algebra\\\"): A formal system for manipulating relations in a database, foundational to SQL. | \\n| - [Relational Calculus](https://en.wikipedia.org/wiki/Relational_calculus \\\"Relational calculus\\\"): A non-procedural query language that provides a way to specify queries based on the properties of the data. | \\n| - [Relational Model](https://en.wikipedia.org/wiki/Relational_model \\\"Relational model\\\"): A framework for defining and manipulating data using relations, which form the basis of SQL. | \\n| - [Objectâ€“Relational Database](https://en.wikipedia.org/wiki/Object%E2%80%93relational_database \\\"Objectâ€“relational database\\\"): A database that integrates object-oriented features with relational database capabilities, enhancing data representation. | \\n\\nThis structured overview of related topics provides a comprehensive understanding of key concepts in database management systems, particularly in relation to SQL and its foundational principles. Each entry is designed to stand alone while contributing to a broader understanding of the relational database landscape.</chunk>\\n<chunk>| **Keywords** | **Description** |\\n| --- | --- |\\n| **As** | [Alias (SQL)](https://en.wikipedia.org/wiki/Alias_(SQL) \\\"Alias (SQL)\\\") - Used to create a temporary name for a table or column. |\\n| **Case** | [Case (SQL)](https://en.wikipedia.org/wiki/Case_(SQL) \\\"Case (SQL)\\\") - A conditional expression that allows for if-then-else logic in SQL queries. |\\n| **Create** | [Create (SQL)](https://en.wikipedia.org/wiki/Create_(SQL) \\\"Create (SQL)\\\") - A command used to create new tables, views, or other database objects. |\\n| **Delete** | [Delete (SQL)](https://en.wikipedia.org/wiki/Delete_(SQL) \\\"Delete (SQL)\\\") - A command that removes rows from a table based on specified conditions. |\\n| **From** | [From (SQL)](https://en.wikipedia.org/wiki/From_(SQL) \\\"From (SQL)\\\") - Specifies the table from which to retrieve data in a query. |\\n| **Group by** | [Group by (SQL)](https://en.wikipedia.org/wiki/Group_by_(SQL) \\\"Group by (SQL)\\\") - Used to arrange identical data into groups for aggregation. |\\n| **Having** | [Having (SQL)](https://en.wikipedia.org/wiki/Having_(SQL) \\\"Having (SQL)\\\") - A clause that filters groups based on a specified condition, often used with aggregate functions. |\\n| **Insert** | [Insert (SQL)](https://en.wikipedia.org/wiki/Insert_(SQL) \\\"Insert (SQL)\\\") - A command that adds new rows to a table. |\\n| **Join** | [Join (SQL)](https://en.wikipedia.org/wiki/Join_(SQL) \\\"Join (SQL)\\\") - Combines rows from two or more tables based on a related column. |\\n| **Merge** | [Merge (SQL)](https://en.wikipedia.org/wiki/Merge_(SQL) \\\"Merge (SQL)\\\") - A command that allows for conditional updates or inserts into a table. |\\n| **Null** | [Null (SQL)](https://en.wikipedia.org/wiki/Null_(SQL) \\\"Null (SQL)\\\") - Represents a missing or undefined value in a database. |\\n| **Order by** | [Order by](https://en.wikipedia.org/wiki/Order_by \\\"Order by\\\") - A clause that sorts the result set of a query by one or more columns. |\\n| **Over** | [Window function (SQL)](https://en.wikipedia.org/wiki/Window_function_(SQL) \\\"Window function (SQL)\\\") - Used to perform calculations across a set of table rows related to the current row. |\\n| **Prepare** | [Prepare (SQL)](https://en.wikipedia.org/wiki/Prepare_(SQL) \\\"Prepare (SQL)\\\") - A command that prepares a SQL statement for execution, enhancing performance and security. |\\n| **Select** | [Select (SQL)](https://en.wikipedia.org/wiki/Select_(SQL) \\\"Select (SQL)\\\") - The primary command used to query data from a database. |\\n| **Truncate** | [Truncate (SQL)](https://en.wikipedia.org/wiki/Truncate_(SQL) \\\"Truncate (SQL)\\\") - A command that removes all rows from a table without logging individual row deletions. |\\n| **Union** | [Set operations (SQL)](https://en.wikipedia.org/wiki/Set_operations_(SQL) \\\"Set operations (SQL)\\\") - Combines the results of two or more SELECT statements into a single result set. |\\n| **Update** | [Update (SQL)](https://en.wikipedia.org/wiki/Update_(SQL) \\\"Update (SQL)\\\") - A command that modifies existing records in a table based on specified conditions. |\\n\\nThis table provides a concise overview of key SQL keywords, along with their definitions and links to further information. Each entry is designed to stand alone while maintaining a clear context within the realm of SQL programming.</chunk>\\n  </chunks>\\n</context>\\n\\nImportant: Focus only on the current topic. Do not cover material from other modules in the syllabus:\\n\\nThe lesson should follow this progression:\\n1. Start with tutorial steps that introduce and explain concepts (from basic to advanced)\\n2. Include examples that demonstrate the concepts\\n3. Reinforce with questions throughout the lesson\\n4. Continue alternating between tutorials, examples, and questions\\n\\nRequired step count: 10-15 steps total\\n\\nExample pattern of steps:\\nTUTORIAL (introduce foundational concept)\\nEXAMPLE (demonstrate foundational concept)\\nQUESTION (test foundational concept)\\nQUESTION (reinforce foundational concept)\\nTUTORIAL (introduce intermediate concept)\\nEXAMPLE (demonstrate intermediate concept)\\nQUESTION (test intermediate concept)\\nQUESTION (reinforce intermediate concept)\\nEXAMPLE (demonstrate advanced application)\\nQUESTION (test advanced application)\\nTUTORIAL (deeper concept)\\nQUESTION (comprehensive application)\\n... continues\\n\\nGuidelines:\\n- Use markdown formatting in the content\\n- Make the progression logical and build upon previous knowledge\\n- Include code examples when relevant\\n- For questions, provide meaningful explanations for each alternative\\n- Stay focused on the specific topic scope\\n- Avoid covering material from other modules\\n\\nEach step must follow one of these formats:\\n\\nTUTORIAL steps should:\\n- Start with foundational concepts\\n- Use clear explanations with markdown formatting\\n- Include relevant code snippets or diagrams when needed\\n- Break down complex topics into digestible parts\\n- Format content as:\\n  {\\n    type: \\\"TUTORIAL\\\",\\n    title: \\\"Clear, concise title\\\",\\n    body: \\\"Detailed explanation in markdown\\\"\\n  }\\n\\nEXAMPLE steps should:\\n- Demonstrate practical applications\\n- Show real-world scenarios\\n- Include both the problem and its solution\\n- Explain the reasoning behind the solution\\n- Format content as:\\n  {\\n    type: \\\"EXAMPLE\\\",\\n    body: \\\"Problem description\\\",\\n    answer: \\\"Detailed solution\\\"\\n  }\\n\\nQUESTION steps should:\\n- Test understanding of previously covered concepts\\n- Have 3-4 carefully crafted alternatives\\n- Include detailed explanations for each alternative\\n- Ensure the correct alternative is clearly superior\\n- Format content as:\\n  {\\n    type: \\\"QUESTION\\\",\\n    question: \\\"Clear question text\\\",\\n    alternatives: [\\n      {\\n        order: 1,\\n        content: \\\"Alternative text\\\",\\n        explanation: \\\"Why this is/isn't correct\\\"\\n      },\\n      // ... more alternatives\\n    ],\\n    correctAlternativeOrder: number\\n  }\\n\\n<reminder>\\n  <topic-scope>\\n    Focus only on the current topic. Do not cover material from other modules.\\n    <topic-title>\\n      2.2.2. Filtering, Sorting, and Joining Data\\n    </topic-title>\\n  </topic-scope>\\n  <step-count>\\n    Required step count: 10-15 steps total\\n  </step-count>\\n</reminder>\\n\\nGenerate an array of steps that follows this structure and ensures optimal learning progression while staying strictly within the scope of the current topic.\"}]}"
  }
}